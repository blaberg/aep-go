package genaep

import (
	"fmt"
	"log/slog"

	"google.golang.org/protobuf/compiler/protogen"
)

const (
	PluginName              = "protoc-gen-go-aep"
	generatedFilenameSuffix = "_aep.go"
	PluginVersion           = "development"
)

func Run(gen *protogen.Plugin) error {
	for _, f := range gen.Files {
		if !f.Generate {
			continue
		}
		g := newGeneratedFile(gen, f)
		g.Skip()
		err := generateResourcePath(gen, g, f)
		if err != nil {
			slog.Error(f.Desc.Path(), "error ", err)
		}
	}
	return nil
}

func newGeneratedFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+generatedFilenameSuffix, file.GoImportPath)
	g.P("// Code generated by ", PluginName, ". DO NOT EDIT.")
	g.P("//")
	g.P("// versions:")
	g.P("// \t", PluginName, " ", PluginVersion)
	g.P("// \tprotoc ", getProtocVersion(gen))
	g.P("// source: ", file.Desc.Path())
	g.P()
	g.P("package ", file.GoPackageName)
	return g
}

func getProtocVersion(gen *protogen.Plugin) string {
	if v := gen.Request.GetCompilerVersion(); v != nil {
		return fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
	}
	return "(unknown)"
}
